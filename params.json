{"name":"Dvhb printsrc","tagline":"Python library for print sources.","body":"# DevHub PrintSrc v0.0.5\r\n\r\nLibrary for generation printable `.html` file from selected source files in directory.\r\n\r\nMeanwhile in Russia printed documents are legally valid only.\r\nPrint sources from GitHub, stitch them and sign them if you need to delivery results to your customer or register\r\nyour rights for code.\r\n\r\n## Using\r\n\r\nJust import `printsrc` from `dvhb_printsrc`. Can use as is in `fabfile.py`:\r\n\r\nExample **`fabfile.py`**:\r\n\r\n    from dvhb_printsrc import printsrc\r\n\r\nThen you can run:\r\n\r\n    $ fabfile printsrc:'path/to/src',outFile.html,,'.py[oc]+$\\\\,static'\r\n\r\n**Note:** double backslash on regex separation, because of it's not raw string! Of course you also can use regex\r\n`'or'` — `'|'` but then regex hasn't be splited to separate expressions (see function parameters description).\r\n\r\nFor automatic install add string to your **`pipreq`** file:\r\n\r\n    git+https://github.com/dvhb/dvhb_printsrc.git@0.0.5#egg=dvhb_printsrc==0.0.5\r\n\r\n## API\r\n\r\nFunction parameters:\r\n\r\n* `in_folder` — folder with sources;\r\n* `out_file` — target filename for print;\r\n* `include` — string with regexes of file paths for inclusion to printing. Separate regex with `r'\\,'`;\r\n* `exclude` — string with regexes of file paths for exclusion from printing. Separate regex with `r'\\,'`;\r\n* `inc_file` — filenfme of file with regexes of file paths for inclusion to printing. Separate by new line;\r\n* `exc_file` — filenfme of file with regexes of file paths for exclusion from printing. Separate by new line;\r\n* `toc` — print or none table of content. If string — it'll be text of toc header;\r\n* `uparr` — print or not after each source file link to begin of document. If string — it'll be text of link;\r\n* `style` — name css style for highlighting from `pygments`. Example: http://pygments.org/demo/ ;\r\n* `css` — filensme of css file with custom styles;\r\n* `title` — <title> prefix of resulted html file;\r\n* `verbose` — print current actions to standart output;\r\n* `binary_ext` — list of binary filenames extensions (always exluded).\r\n\r\n## Algoritm\r\n\r\n`.html` extension automatically added to out file.\r\n\r\nRegexps of inclusion and exclusion from string and from files concatenated.\r\n\r\nBinary extesions exlusion list always added list of binary files extensions.\r\n\r\nCustom styles from file added after styles from pygments. To omit pygments styles set `styles` to logical `False`.\r\n\r\nIn begin all files excluded.\r\n\r\nFirst file check for inclusion. If inclusion regex list empty — all files included. First match make file included.\r\n\r\nThen included file check for exclusion. If exclusion regex list empty — already included file stay included.\r\nFirst match make file excluded and function check next file.\r\n\r\nIf file included function try search pygments lexer for filename. If lexer found — file content processed with him and append to output .html file. If lexer not found — function try to encode file content to `UTF-8`. If success —\r\nit included as is inside `<div class=\"highlight\"><pre>\\n{0}\\n</pre></div>` blocks and append to output .html file.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}